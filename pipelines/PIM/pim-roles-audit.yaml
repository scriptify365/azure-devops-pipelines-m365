# triggerred manually
trigger: none

pool:
  vmImage: 'windows-latest'

name: pim-roles-audit


parameters:
- name: USER_EMAIL
  displayName: 'User Email'
  type: string
  default: 'enter user email'
  
# here enter your tenant ID & application ID
variables:
  GRAPH_CLIENT_ID: $(GRAPH_CLIENT_ID_VAR)
  GRAPH_TENANT_ID: $(GRAPH_TENANT_ID_VAR)

steps:
# Step 1: Retrieve secrets from Azure Key Vault
- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'name of the sub'
    KeyVaultName: 'key vault name'
    SecretsFilter: 'name of the secret'
    RunAsPreJob: true
  displayName: 'Retrieve GRAPH_CLIENT_SECRET from Azure Key Vault'

# Step 2: Store Secret as an Environment Variable
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $secretValue = "$(name of the secret)"

      if (-not $secretValue -or $secretValue -eq "" -or $secretValue -eq "***") {
          Write-Host "ERROR: Secret is missing or masked!" -ForegroundColor Red
          exit 1
      }

      Write-Host "##vso[task.setvariable variable=GRAPH_CLIENT_SECRET]$secretValue"
      Write-Host "Graph Client Secret stored as an environment variable."
  displayName: 'Store Graph Client Secret as Environment Variable'

# Step 3: Checkout repository
- checkout: self
  persistCredentials: true
  displayName: 'Checkout repository'

# Step 4: Debug Environment Variables
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "USER_EMAIL: ${{ parameters.USER_EMAIL }}"
      Write-Host "GRAPH_CLIENT_ID: $(GRAPH_CLIENT_ID)"
      Write-Host "GRAPH_TENANT_ID: $(GRAPH_TENANT_ID)"

      if (-not "$(GRAPH_CLIENT_SECRET)" -or "$(GRAPH_CLIENT_SECRET)" -eq "***") {
          Write-Host "ERROR: GRAPH_CLIENT_SECRET is masked or missing!" -ForegroundColor Red
          exit 1
      } else {
          Write-Host "GRAPH_CLIENT_SECRET is available but masked for security."
      }
  displayName: 'Debug Environment Variables'

# Step 5: Run PowerShell script to get user roles and PIM memberships 
- task: PowerShell@2
  inputs:
    targetType: 'filePath'
    filePath: '$(Build.SourcesDirectory)/get-user-roles-pim.ps1'
    arguments: >
      -UserEmail "${{ parameters.USER_EMAIL }}"
      -GraphClientId "$(GRAPH_CLIENT_ID)"
      -GraphTenantId "$(GRAPH_TENANT_ID)"
  env:
    GRAPH_CLIENT_SECRET: $(GRAPH_CLIENT_SECRET)
  displayName: 'Run PowerShell script to get user PIM and admin roles'

  # Step 6: Run PowerShell script to get user PIM admin roles
- task: PowerShell@2
  inputs:
    targetType: 'filePath'
    filePath: '$(Build.SourcesDirectory)/get-user-admin-roles-pim.ps1'
    arguments: >
      -UserEmail "${{ parameters.USER_EMAIL }}"
      -GraphClientId "$(GRAPH_CLIENT_ID)"
      -GraphTenantId "$(GRAPH_TENANT_ID)"
  env:
    GRAPH_CLIENT_SECRET: $(GRAPH_CLIENT_SECRET)
  displayName: 'Run PowerShell script to get user PIM admin roles'
